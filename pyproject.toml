[project]
name = "jirascope"
version = "0.1.0"
description = "AI-powered Jira work item analysis and management tool"
authors = [
    {name = "Alex Shumilov",email = "alex.shumilov@rationalexponent.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "qdrant-client>=1.7.0,<2.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "click>=8.1.0,<9.0.0",
    "rich>=13.7.0,<14.0.0",
    "fastapi>=0.115.0,<0.116.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "websockets>=12.0,<13.0",
    "httpx>=0.27.0,<0.28.0",
    "pyyaml>=6.0,<7.0",
    "pandas>=2.1.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "anthropic>=0.8.0,<0.9.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "sentry-sdk[fastapi]>=1.40.0,<2.0.0",
    "mcp (>=1.0.0,<2.0.0)"
]

[project.scripts]
jirascope = "jirascope.cli.main:cli"

[tool.poetry]
packages = [{include = "jirascope", from = "src"}]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^24.0.0"
ruff = "^0.8.0"
mypy = "^1.8.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "htmlcov",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "C90", # McCabe complexity
    "PL",  # Pylint
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RET", # flake8-return
    "SLF", # flake8-self
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex (let's be more flexible)
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements in function
    "TRY003",  # Avoid specifying long messages outside the exception class
    "PLR2004", # Magic value used in comparison
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, print statements, etc.
"tests/**/*" = [
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "T201",    # `print` found
    "PLR0913", # Too many arguments to function call
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
]

# Scripts can be less strict
"scripts/**/*" = [
    "T201",    # `print` found
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["jirascope"]
force-single-line = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black configuration (backup formatter)
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | htmlcov
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.12"
# Start with lenient settings - gradually make stricter
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient
disallow_incomplete_defs = false  # Start lenient
check_untyped_defs = false  # Start lenient
disallow_untyped_decorators = false  # Start lenient
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Start lenient
warn_no_return = false  # Start lenient
warn_unreachable = true
strict_equality = true
show_error_codes = true
# Ignore missing imports for now
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Gradually enable stricter checking for new modules
[[tool.mypy.overrides]]
module = "jirascope.core.*"
disallow_untyped_defs = true
warn_return_any = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --cov=src/jirascope --cov-report=html --cov-report=term-missing --cov-report=xml --cov-fail-under=80"

[tool.coverage.run]
source = ["src/jirascope"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
