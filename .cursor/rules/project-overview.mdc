---
description: Complete project overview including architecture, purpose, technology stack, and structure
globs:
alwaysApply: false
---
# JiraScope Project Overview

JiraScope is an AI-powered Jira work item analysis and management tool with RAG capabilities, MCP (Model Context Protocol) integration, and LMStudio support for local AI processing.

## üéØ Core Purpose
- **Semantic Search**: Natural language queries across Jira issues
- **Technical Debt Analysis**: Automated identification and prioritization
- **Scope Drift Detection**: Epic requirement change tracking
- **Dependency Mapping**: Cross-team blocker visualization
- **LMStudio Integration**: Local AI-powered analysis through MCP protocol

## üèóÔ∏è Architecture Overview
- **MCP Server**: Standalone server for LMStudio integration (`mcp_server.py`)
- **RAG Pipeline**: Vector-based retrieval and generation system
- **CLI Interface**: Command-line tool for direct usage
- **Vector Database**: Qdrant for semantic search and storage
- **Local AI**: LMStudio for privacy-first processing

## üìÅ Project Structure

### Core Source Code (`src/jirascope/`)
- **`analysis/`**: AI-powered analysis modules
  - `similarity_analyzer.py`: Duplicate detection
  - `structural_analyzer.py`: Technical debt clustering
  - `content_analyzer.py`: Content quality analysis
  - `cross_epic_analyzer.py`: Epic boundary analysis
  - `template_inference.py`: Template generation
  - `temporal_analyzer.py`: Time-based analysis

- **`rag/`**: RAG (Retrieval-Augmented Generation) system
  - `pipeline.py`: Main RAG pipeline orchestration
  - `query_processor.py`: Query parsing and enhancement
  - `context_assembler.py`: Context building for AI models
  - `retrieval_engine.py`: Vector similarity search

- **`mcp_server/`**: MCP protocol implementation
  - `server.py`: FastMCP server implementation
  - `tools.py`: MCP tool definitions

- **`clients/`**: External service integrations
  - `qdrant_client.py`: Vector database client
  - `lmstudio_client.py`: Local AI model client
  - `claude_client.py`: Anthropic Claude integration
  - `mcp_client.py`: MCP protocol client
  - `auth.py`: Authentication management

- **`pipeline/`**: Data processing pipeline
  - `embedding_processor.py`: Text to vector conversion
  - `smart_chunker.py`: Intelligent text chunking
  - `incremental_processor.py`: Change detection
  - `quality_validator.py`: Data quality assurance
  - `rag_quality_tester.py`: RAG system testing
  - `comprehensive_quality_tester.py`: End-to-end testing

- **`extractors/`**: Data extraction from external sources
  - `jira_extractor.py`: Jira API integration

- **`cli/`**: Command-line interface
  - `main.py`: CLI entry point with comprehensive commands

- **`core/`**: Core configuration and shared components
  - `config.py`: Configuration management

- **`utils/`**: Utility functions and helpers
  - `cost_reporter.py`: API cost tracking
  - `cost_optimizer.py`: Cost optimization strategies
  - `logging.py`: Structured logging

- **`models/`**: Data models and schemas

### Configuration and Scripts
- **`config/`**: Configuration files
  - `jirascope.yaml`: Main configuration template
- **`scripts/`**: Setup and utility scripts
- **`tests/`**: Comprehensive test suite
- **`mcp_server.py`**: **ROOT-LEVEL MCP SERVER** - Main entry point for LMStudio integration

## üîß Key Technologies
- **Python 3.13+**: Core language with modern features
- **FastMCP**: MCP protocol implementation
- **Qdrant**: Vector database for semantic search
- **LMStudio**: Local AI model serving
- **Anthropic Claude**: Cloud AI for advanced analysis
- **Pydantic**: Data validation and serialization
- **Poetry**: Dependency management
- **Docker**: Containerization support

## üìä Development Workflow
1. **Local Development**: Poetry for dependency management
2. **Testing**: pytest with comprehensive coverage
3. **Linting**: Ruff for code quality
4. **Pre-commit**: Automated quality checks
5. **MCP Integration**: Direct LMStudio integration

## üöÄ Entry Points
- **MCP Server**: `python mcp_server.py` (primary for LMStudio)
- **CLI**: `jirascope [command]` (direct usage)
- **Package**: `pip install -e .` (development mode)

## üîç Current Focus Areas
- Enhanced RAG pipeline performance
- Cost optimization for AI services
- Comprehensive quality testing
- MCP protocol compliance
- Local-first privacy approach
